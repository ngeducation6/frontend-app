name: Full CI/CD Pipeline

on:
  pull_request_target:
    types:
      - opened
      - synchronize
    branches:
      - master

jobs:
  front-end-backend:
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout Frontend Repository
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Set up MongoDB
        run: |
          pwd
          wget -qO - https://www.mongodb.org/static/pgp/server-6.0.asc | sudo apt-key add -
          echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu focal/mongodb-org/6.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-6.0.list
          sudo apt-get update
          sudo apt-get install -y mongodb-org

      - name: Start MongoDB Service
        run: sudo service mongod start
        
      - name: Wait for MongoDB to initialize
        run: sleep 5
        
      - name: Verify MongoDB Service
        run: |
          sleep 5
          if ! sudo service mongod status  | grep -q "active (running)"; then
            echo "MongoDB service failed to start"
            exit 1
          else
            echo "MongoDB service is running"
          fi


      - name: Checkout Backend Repository
        uses: actions/checkout@v2
        with:
          repository: ngeducation6/backend-app
          path: backend
          ref: master
          
      - name: Execute createUser.js script
        run: |
          pwd
          cd backend
          cd dbscripts
          npm install
          mongosh --eval "load('createUser.js')"

      - name: Execute loaddata.js script
        run: |
          cd backend
          cd dbscripts
          mongosh --eval "load('loaddata.js')"

      - name: Build Backend
        run: |
          cd backend
          # sudo apt install -y golang-go
          go build

      - name: Run Backend
        run: |
          cd backend
          go run main.go &
          sleep 5
          if curl -sSf http://localhost:8080/data > /dev/null; then
            echo "Backend server is running"
          else
            echo "Backend server failed to start"
            exit 1
          fi

      - name: Install FrontEnd Dependencies
        run: npm install --omit=dev

      - name: Build Frontend
        run: |
          npm install react-scripts --save
          sudo chmod +x node_modules/.bin/react-scripts
          npm run build

      # - name: Start Frontend Server
      #   run: |
      #     npm start &
      #     sleep 5
      #     if curl -sSf http://localhost:3000/ > /dev/null; then
      #       echo "Frontend server is running"
      #     else
      #       echo "Frontend server failed to start"
      #       exit 1
      #     fi

      - name: Cypress run
        uses: cypress-io/github-action@v5
        with:
          build: npm run build
          start: npm start
          browser: chrome






  # cypress:
  #   runs-on: ubuntu-20.04

  #   needs: [backend, frontend]

  #   steps:
  #     - name: Checkout Frontend Repository
  #       uses: actions/checkout@v2
  #       with:
  #         ref: ${{ github.event.pull_request.head.ref }}

  #     - name: Install Dependencies
  #       run: npm install

  #     - name: Run Cypress Tests
  #       run: npx cypress run
